1 ; Oh Mummy (clone), Remy Sharp 2020
10 RUN AT 2: REM 3.5Mhz (0 = 3.5, 1 = 7 (aim), 2 = 14 (likely))
11 ;
30 PROC initSprites()
40 PROC initBaddies()
50 PROC initTombs(): ; PROC fps()
70 ;
80 ; define player and game state
90 LET %x=144: LET %y=32: LET %l=4: LET %s=56: ; s= SPRITE
100 LET %d=1: LET %z=8: ; direction & speed
110 LET %P=%$ffff: ; t=baddie speed, %P = last position
115 LET %a=%$ffff: LET ctr=0
120 SPRITE STOP : ; switch to batching
130 SPRITE 10,%x,%y,%s,%d
140 PROC takeLife()
150 REPEAT : PROC updateLoop(): REPEAT UNTIL %l=0
160 PROC gameOver(): GO TO 20
170 ;
180 ; start main game loop - we do only one thing at a time in the main loop
190 DEFPROC updateLoop()
200 LET %b=0: ; baddie index
210 REPEAT
220 ; IF %b      <       3 THEN PROC baddie(): SPRITE %b+1,%B(i),%B(i+1),%B(i+2),%B(i+5)
225 LET %b=%b+1
230 REPEAT UNTIL %b=3
250 PROC updatePlayer(): ; PROC fps(): PRINT AT 0,0;%f;" ";%x/16+(y/16);" ": ; f big = bad, small = good
260 PROC treadMark()
280 SPRITE MOVE INT
350 ENDPROC
360 ;
400 DEFPROC updatePlayer()
410 LET %j= IN 31: ; check the joystick and keys
420 ;
430 IF %( IN $fbfe >> 0&1^1) THEN LET %j=%(j+@1000): ; Q
440 IF %( IN $fdfe >> 0&1^1) THEN LET %j=%(j+@0100): ; A
450 IF %( IN $dffe >> 1&1^1) THEN LET %j=%(j+@0010): ; O
460 IF %( IN $dffe >> 0&1^1) THEN LET %j=%(j+@0001): ; P
465 ;
470 IF %j&$0f=0 THEN LET %P=%$ffff: ENDPROC : ; play isn't moving, early exit
480 ; if I can't move on x plane, check y
490 IF %(x-32) MOD 48 THEN : ELSE : IF %j&@0100 THEN PROC down(): ELSE IF %j&@1000 THEN PROC up()
495 PROC checkTomb(): ; check before we potentially move again
500 IF %(y-48) MOD 40 THEN : ELSE : IF %j&@0010 THEN PROC left(): ELSE IF %j&@0001 THEN PROC right():
540 ;
550 ; check for map edge TODO only check if value changed
560 IF %x < 32 THEN : LET %x=32: ELSE IF %x > 272 THEN : LET %x=272
570 IF %y < 48 THEN : LET %y=48: ELSE IF %y > 208 THEN : LET %y=208
580 PROC checkTomb()
590 SPRITE 10,%x,%y,%s,%d
600 ENDPROC
610 ;
700 DEFPROC checkTomb()
710 IF %(x-32 MOD 48) OR (y-48 MOD 40) THEN ENDPROC : ; only run on corners
720 LET %e=%(6*((y-48)/40))+((x-32)/48): ; x/y as aisle index
730 IF %e=a THEN ENDPROC : ; we were just there (%a is last position)
740 %f=%e-a
750 %k=% ABS SGN {f}=1: ; k tracks the direction - 1 for X, 0 for Y
760 IF % SGN {f < 0} THEN %g=%a: ELSE %g=%e
770 IF %k THEN PROC getXTombs() TO %g,%h: ELSE PROC getYTombs() TO %g,%h
780 IF %g > 20 THEN %g=20: ; assign out of bounds to the junk element
790 IF %h > 20 THEN %h=20
800 IF %k THEN %T[g]=%T[g]&@11111101:%T[h]=%T[h]&@11110111: ELSE %T[g]=%T[g]&@11111011:%T[h]=%T[h]&@11111110
810 IF %T[g]=0 THEN PROC openTomb(%g):%T[g]=%$f0
820 IF %T[h]=0 THEN PROC openTomb(%h):%T[h]=%$f0
830 LET %a=%e: ; store the last position
840 ENDPROC
850 ;
860 DEFPROC getXTombs()
870 %h=%1+(g/6)
880 %i=%g-h
890 ENDPROC =%i-5,%i
895 ;
900 DEFPROC getYTombs()
920 %i=%g-6-(g/6)
930 ENDPROC =%i,%i+1
935 ;
940 DEFPROC openTomb(%i)
950 IF %i=20 THEN ENDPROC
960 ON ERROR PRINT AT 0,0;%i;": ";%i MOD 5;": ";%16+((i MOD 5)*48);"/";%32+((i/4)*40);"     ": ENDPROC
980 LAYER ERASE %16+((i MOD 5)*48),%32+((i/5)*40),32,24,28: ; green fill 28
990 ENDPROC
1000 ;
1010 ; leave tread marks
1020 DEFPROC treadMark(): ;up=0,down=1,left=2,right=3
1030 IF %P=$ffff THEN ENDPROC : ; didn't move
1040 IF %P=2 THEN LET %i=%1: ELSE LET %i=%0: ; if left +1, right = -1
1050 IF %P=0 THEN LET %j=%1: ELSE LET %j=%0
1070 BANK 14 POKE 0,%P
1080 TILE 1,1 AT 0,0 TO %x/16+i-2,%y/16+j-2
1090 ENDPROC
1100 ;
2010 ; handle baddies
2020 ;
2030 DEFPROC baddie()
2040 LET %i=%b*6: ; 6 props (easy to mess this up!)
2045 ;
2050 IF %B(i+4)=0 THEN ENDPROC : ; this baddie is dead
2060 IF %B(i+4)=1 AND SPRITE OVER (b+1,10,3) THEN LET %B(i+4)=0: LET %B(i+5)=0: PROC takeLife(): ENDPROC
2100 ;
2110 LET %j=%B(i+3)
2120 IF %j=1 THEN PROC baddieD(): IF %B(i+1)-48 MOD 40 THEN ENDPROC : ;down
2130 IF %j=2 THEN PROC baddieU(): IF %B(i+1)-48 MOD 40 THEN ENDPROC : ;up
2140 IF %j=4 THEN PROC baddieL(): IF %B(i)-32 MOD 48 THEN ENDPROC : ;left
2150 IF %j=8 THEN PROC baddieR(): IF %B(i)-32 MOD 48 THEN ENDPROC : ;right
2160 ;
2170 ; rotate 1:3 times
2180 IF % RND 3=0 THEN LET %B(i+3)=%1 << RND 4: ;qaop/direction
2190 ENDPROC
3010 ;
3020 DEFPROC baddieD(): ; baddie down
3040 LET %B(i+1)=%B(i+1)+z
3050 IF %B(i+1) > 208 THEN : LET %B(i+1)=208: ;
3060 LET %B(i+2)=55: LET %B(i+5)=%B(i+5)^@1000: ;set sprite to up, and flip bits
3070 ENDPROC
3080 ;
3120 DEFPROC baddieU(): ; baddie up
3140 LET %B(i+1)=%B(i+1)-z
3150 IF %B(i+1) < 48 THEN : LET %B(i+1)=48
3160 LET %B(i+2)=54: LET %B(i+5)=%B(i+5)^@1000: ;set sprite to up, and flip bits
3170 ENDPROC
3180 ;
3220 DEFPROC baddieL(): ; baddie left
3240 LET %B(i)=%B(i)-z
3250 IF %B(i) < 32 THEN : LET %B(i)=32:
3260 LET %B(i+2)=%B(i+2)+1: IF %B(i+2) > 53 THEN LET %B(i+2)=52: ;animate sprite
3270 LET %B(i+5)=%@0001: ; and flip bits
3280 ENDPROC
3290 ;
3320 DEFPROC baddieR(): ; baddie right
3340 LET %B(i)=%B(i)+z
3350 IF %B(i) > 272 THEN : LET %B(i)=272
3360 LET %B(i+2)=%B(i+2)+1: IF %B(i+2) > 53 THEN LET %B(i+2)=52: ; animate sprite
3370 LET %B(i+5)=%@1001: ; and flip bits
3380 ENDPROC
3390 ;
3500 DEFPROC takeLife()
3510 LET %l=%l-1
3520 ; FOR %i=0 TO 2: SPRITE %11+i,%200+(i*16),%32,9,%i      <       l: NEXT %i : ; draw lives
3540 ENDPROC
6999 ;
7000 DEFPROC up(): ; move up
7010 LET %P=0
7020 LET %y=%y-z
7030 LET %d=%d^@1000
7040 LET %s=58
7050 ENDPROC
7099 ;
7100 DEFPROC down(): ; move down
7110 LET %P=1
7120 LET %y=%y+z
7130 LET %d=%d^@1000
7140 LET %s=59
7150 ENDPROC
7199 ;
7200 DEFPROC left(): ; move left
7210 LET %P=2
7220 LET %x=%x-z
7230 LET %d=%@1001
7240 LET %s=%s+1: IF %s > 57 THEN LET %s=56
7250 ENDPROC
7299 ;
7300 DEFPROC right(): ; move right
7310 LET %P=3
7320 LET %x=%x+z
7330 LET %d=%@0001
7340 LET %s=%s+1: IF %s > 57 THEN LET %s=56
7350 ENDPROC
7999 ;
8010 ; init functions
8020 ;
8030 DEFPROC initSprites()
8035 LAYER 2,1: CLS
8040 LOAD "mummy.spr" BANK 13: REM load spritesheet
8050 LOAD "mummy.map" BANK 14: REM load tile map
8060 TILE BANK 13: REM point tiles to spritesheet
8070 TILE DIM 14,0,16,16: REM bank 14, offset 0, tilemap width 16 tiles, tile size 16
8080 TILE 16,12: REM print tile for 16 tile cols by 12 tile rows
8090 LOAD "mummy-6.spr" BANK 16,0,4096
8100 SPRITE BANK 13
8120 SPRITE CLEAR : SPRITE PRINT 1
8130 PAPER 255: INK 0: BORDER 6: ;background black (6 = yellow), text white
8140 ENDPROC
8150 ;
8200 DEFPROC gameOver()
8210 INVERSE 1: PRINT AT 6,11;"GAME OVER"
8480 REPEAT : REPEAT UNTIL INKEY$ ="s": INVERSE 1
8490 ENDPROC
8500 ;
8510 ; initBaddies: %B=Array([x,y,spr,angle(0: x, 1: y),direction(0: backward, 1: forward),alive])
8520 ; note: i*j = j properties per baddie
8530 DEFPROC initBaddies()
8535 LET %j=6: ;n props
8540 FOR %i=0 TO 2: ;total baddies
8550 LET %B(i*j)=% RND 192+48: ; x
8560 LET %B((i*j)+1)=% RND 4*48+48: ; y
8570 LET %B((i*j)+2)=53: ; SPRITE
8580 LET %B((i*j)+3)=%1 << ( RND 2+2): ;qaop/direction
8590 LET %B((i*j)+4)=1: ; alive
8591 LET %B((i*j)+5)=1: ; sprite flags
8600 NEXT %i
8650 ENDPROC
8660 ;
8670 DEFPROC initTombs()
8680 FOR %i=0 TO 21: ; note that index 20 is used for dumping invalid/out of bounds
8690 LET %T(i)=%$0f: ; this is 00001111 - each edge will be bit masked, and once it hits 0, it's masked with 0xf0 so it's never 0 again
8700 NEXT %i
9000 ENDPROC
9799 ;
9800 DEFPROC fps()
9810 LET %g=% DPEEK 23672
9820 LET %f=%g-h
9840 LET %h=%g
9860 ENDPROC
9899 ;
9900 ;Quick save
9901 ;
9910 ; SPRITE PRINT 0: SAVE "mummy-3.bas" LINE 9999: STOP
9911 CLEAR : SPRITE PRINT 0: SAVE "mummy.bas": STOP
9996 ;
9997 ;Boot game
9998 ;
9999 PROC initSprites(): GO TO 5
